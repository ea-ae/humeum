//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class AssetsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get asset options for a specific user.
     * @return Returns the assets.
     */
    getAssets(user: number, profile: number): Promise<AssetDto[]> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles/{profile}/assets";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (profile === undefined || profile === null)
            throw new Error("The parameter 'profile' must be defined.");
        url_ = url_.replace("{Profile}", encodeURIComponent("" + profile));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAssets(_response);
        });
    }

    protected processGetAssets(response: Response): Promise<AssetDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an invalid authentication token or CSRF header is missing.", status, _responseText, _headers, result403);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AssetDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("If a profile with given ID wasn\'t found for the user.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AssetDto[]>(null as any);
    }

    /**
     * Create a new asset for a profile that can be used for investment transactions.
     * @param name (optional) 
     * @param description (optional) 
     * @param returnRate (optional) 
     * @param standardDeviation (optional) 
     * @param assetType (optional) 
     * @return Returns a location header to the newly created item.
     */
    addAsset(user: number, profile: number, name: string | null | undefined, description: string | null | undefined, returnRate: number | null | undefined, standardDeviation: number | null | undefined, assetType: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles/{profile}/assets?";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (profile === undefined || profile === null)
            throw new Error("The parameter 'profile' must be defined.");
        url_ = url_.replace("{Profile}", encodeURIComponent("" + profile));
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (description !== undefined && description !== null)
            url_ += "Description=" + encodeURIComponent("" + description) + "&";
        if (returnRate !== undefined && returnRate !== null)
            url_ += "ReturnRate=" + encodeURIComponent("" + returnRate) + "&";
        if (standardDeviation !== undefined && standardDeviation !== null)
            url_ += "StandardDeviation=" + encodeURIComponent("" + standardDeviation) + "&";
        if (assetType !== undefined && assetType !== null)
            url_ += "AssetType=" + encodeURIComponent("" + assetType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddAsset(_response);
        });
    }

    protected processAddAsset(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an invalid authentication token or CSRF header is missing.", status, _responseText, _headers, result403);
            });
        } else if (status === 201) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("If the domain invariants or application validation rules weren\'t satisfied.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("If a profile or asset type with the specified ID could not be found for the user.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Get asset with given ID.
     * @return Returns the asset.
     */
    getAsset(user: number, profile: number, asset: number): Promise<AssetDto> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles/{profile}/assets/{asset}";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (profile === undefined || profile === null)
            throw new Error("The parameter 'profile' must be defined.");
        url_ = url_.replace("{Profile}", encodeURIComponent("" + profile));
        if (asset === undefined || asset === null)
            throw new Error("The parameter 'asset' must be defined.");
        url_ = url_.replace("{Asset}", encodeURIComponent("" + asset));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAsset(_response);
        });
    }

    protected processGetAsset(response: Response): Promise<AssetDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an invalid authentication token or CSRF header is missing.", status, _responseText, _headers, result403);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AssetDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("If asset or profile was not found.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AssetDto>(null as any);
    }

    /**
     * Deletes a custom asset with given ID from a profile.
     * @return If asset was deleted.
     */
    deleteTransaction(user: number, profile: number, asset: number): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles/{profile}/assets/{asset}";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (profile === undefined || profile === null)
            throw new Error("The parameter 'profile' must be defined.");
        url_ = url_.replace("{Profile}", encodeURIComponent("" + profile));
        if (asset === undefined || asset === null)
            throw new Error("The parameter 'asset' must be defined.");
        url_ = url_.replace("{Asset}", encodeURIComponent("" + asset));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteTransaction(_response);
        });
    }

    protected processDeleteTransaction(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an invalid authentication token or CSRF header is missing.", status, _responseText, _headers, result403);
            });
        } else if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("If asset or profile was not found.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class ProfilesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get profiles owned by a user.
     * @return Returns the profiles.
     */
    getProfiles(user: number): Promise<ProfileDto[]> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProfiles(_response);
        });
    }

    protected processGetProfiles(response: Response): Promise<ProfileDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an invalid authentication token or CSRF header is missing.", status, _responseText, _headers, result403);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProfileDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProfileDto[]>(null as any);
    }

    /**
     * Creates a new profile for an user. Users can have multiple profiles with their own
    configuration settings, assets, and transactions.
     * @param name (optional) 
     * @param description (optional) 
     * @param withdrawalRate (optional) 
     * @return Returns a location header to the newly created item.
     */
    addProfile(user: number, name: string | null | undefined, description: string | null | undefined, withdrawalRate: number | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles?";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (description !== undefined && description !== null)
            url_ += "Description=" + encodeURIComponent("" + description) + "&";
        if (withdrawalRate !== undefined && withdrawalRate !== null)
            url_ += "WithdrawalRate=" + encodeURIComponent("" + withdrawalRate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddProfile(_response);
        });
    }

    protected processAddProfile(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an invalid authentication token or CSRF header is missing.", status, _responseText, _headers, result403);
            });
        } else if (status === 201) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("If the field values did not satisfy domain invariants.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Returns profile with given ID owned by user.
     * @return Returns the profile.
     */
    getProfile(user: number, profile: number): Promise<ProfileDto> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles/{profile}";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (profile === undefined || profile === null)
            throw new Error("The parameter 'profile' must be defined.");
        url_ = url_.replace("{Profile}", encodeURIComponent("" + profile));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetProfile(_response);
        });
    }

    protected processGetProfile(response: Response): Promise<ProfileDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an invalid authentication token or CSRF header is missing.", status, _responseText, _headers, result403);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProfileDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Profile with given ID was not found for user.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProfileDto>(null as any);
    }

    /**
     * Deletes a profile with the given ID.
     * @return If profile was deleted.
     */
    deleteProfile(user: number, profile: number): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles/{profile}";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (profile === undefined || profile === null)
            throw new Error("The parameter 'profile' must be defined.");
        url_ = url_.replace("{Profile}", encodeURIComponent("" + profile));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteProfile(_response);
        });
    }

    protected processDeleteProfile(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an invalid authentication token or CSRF header is missing.", status, _responseText, _headers, result403);
            });
        } else if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("If a profile with the given ID was not found.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class TaxSchemesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all tax schemes.
     * @param query (optional) 
     * @return List of tax schemes.
     */
    getTaxSchemes(query: GetTaxSchemesQuery | null | undefined): Promise<TaxSchemeDto[]> {
        let url_ = this.baseUrl + "/api/v1/tax-schemes?";
        if (query !== undefined && query !== null)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTaxSchemes(_response);
        });
    }

    protected processGetTaxSchemes(response: Response): Promise<TaxSchemeDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TaxSchemeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TaxSchemeDto[]>(null as any);
    }
}

export class TransactionCategoriesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all categories that are either default or created by the profile.
     */
    getCategories(user: number, profile: number): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles/{profile}/transactions/categories";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (profile === undefined || profile === null)
            throw new Error("The parameter 'profile' must be defined.");
        url_ = url_.replace("{Profile}", encodeURIComponent("" + profile));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCategories(_response);
        });
    }

    protected processGetCategories(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Create a new transaction category with a name.
     * @param name (optional) 
     * @return Returns a location header to the newly created item.
     */
    addCategory(user: number, profile: number, name: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles/{profile}/transactions/categories?";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (profile === undefined || profile === null)
            throw new Error("The parameter 'profile' must be defined.");
        url_ = url_.replace("{Profile}", encodeURIComponent("" + profile));
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddCategory(_response);
        });
    }

    protected processAddCategory(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an invalid authentication token or CSRF header is missing.", status, _responseText, _headers, result403);
            });
        } else if (status === 201) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("If the fields did not satisfy the domain invariants.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("If a profile or transaction with the specified ID could not be found.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Get details of a category with given ID.
     */
    getCategory(user: number, profile: number, category: number): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles/{profile}/transactions/categories/{category}";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (profile === undefined || profile === null)
            throw new Error("The parameter 'profile' must be defined.");
        url_ = url_.replace("{Profile}", encodeURIComponent("" + profile));
        if (category === undefined || category === null)
            throw new Error("The parameter 'category' must be defined.");
        url_ = url_.replace("{Category}", encodeURIComponent("" + category));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCategory(_response);
        });
    }

    protected processGetCategory(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Delete a category by its ID.
     * @return If category is successfully deleted.
     */
    deleteCategory(user: number, profile: number, category: number): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles/{profile}/transactions/categories/{category}";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (profile === undefined || profile === null)
            throw new Error("The parameter 'profile' must be defined.");
        url_ = url_.replace("{Profile}", encodeURIComponent("" + profile));
        if (category === undefined || category === null)
            throw new Error("The parameter 'category' must be defined.");
        url_ = url_.replace("{Category}", encodeURIComponent("" + category));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCategory(_response);
        });
    }

    protected processDeleteCategory(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an invalid authentication token or CSRF header is missing.", status, _responseText, _headers, result403);
            });
        } else if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("If a profile or profile-owned category with the specified ID could not be found.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class TransactionsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get transactions for a specified user with optional filtering conditions.
     * @param startBefore (optional) 
     * @param startAfter (optional) 
     * @return Returns the transactions.
     */
    getTransactions(user: number, profile: number, startBefore: Date | null | undefined, startAfter: Date | null | undefined): Promise<TransactionDto[]> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles/{profile}/transactions?";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (profile === undefined || profile === null)
            throw new Error("The parameter 'profile' must be defined.");
        url_ = url_.replace("{Profile}", encodeURIComponent("" + profile));
        if (startBefore !== undefined && startBefore !== null)
            url_ += "StartBefore=" + encodeURIComponent(startBefore ? "" + startBefore.toISOString() : "") + "&";
        if (startAfter !== undefined && startAfter !== null)
            url_ += "StartAfter=" + encodeURIComponent(startAfter ? "" + startAfter.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTransactions(_response);
        });
    }

    protected processGetTransactions(response: Response): Promise<TransactionDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an invalid authentication token or CSRF header is missing.", status, _responseText, _headers, result403);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TransactionDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("If a profile with given ID wasn\'t found for the user.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TransactionDto[]>(null as any);
    }

    /**
     * Create a new transaction for a user profile. Transactions can either be single-payment, in which
    case the optional recurring transaction fields are not provided; or they can be recurrent,
    meaning they'll be performed at a certain frequency up until the payment end date.
    The first payment is always made at the payment start date. Positive amounts are income,
    negative amounts are expenses.
     * @param name (optional) 
     * @param description (optional) 
     * @param amount (optional) 
     * @param type (optional) 
     * @param paymentStart (optional) 
     * @param taxScheme (optional) 
     * @param asset (optional) 
     * @param paymentEnd (optional) 
     * @param timeUnit (optional) 
     * @param timesPerCycle (optional) 
     * @param unitsInCycle (optional) 
     * @return Returns a location header to the newly created item.
     */
    addTransaction(user: number, profile: number, name: string | null | undefined, description: string | null | undefined, amount: number | null | undefined, type: string | undefined, paymentStart: Date | null | undefined, taxScheme: number | null | undefined, asset: number | null | undefined, paymentEnd: Date | null | undefined, timeUnit: string | null | undefined, timesPerCycle: number | null | undefined, unitsInCycle: number | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles/{profile}/transactions?";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (profile === undefined || profile === null)
            throw new Error("The parameter 'profile' must be defined.");
        url_ = url_.replace("{Profile}", encodeURIComponent("" + profile));
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (description !== undefined && description !== null)
            url_ += "Description=" + encodeURIComponent("" + description) + "&";
        if (amount !== undefined && amount !== null)
            url_ += "Amount=" + encodeURIComponent("" + amount) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        if (paymentStart !== undefined && paymentStart !== null)
            url_ += "PaymentStart=" + encodeURIComponent(paymentStart ? "" + paymentStart.toISOString() : "") + "&";
        if (taxScheme !== undefined && taxScheme !== null)
            url_ += "TaxScheme=" + encodeURIComponent("" + taxScheme) + "&";
        if (asset !== undefined && asset !== null)
            url_ += "Asset=" + encodeURIComponent("" + asset) + "&";
        if (paymentEnd !== undefined && paymentEnd !== null)
            url_ += "PaymentEnd=" + encodeURIComponent(paymentEnd ? "" + paymentEnd.toISOString() : "") + "&";
        if (timeUnit !== undefined && timeUnit !== null)
            url_ += "TimeUnit=" + encodeURIComponent("" + timeUnit) + "&";
        if (timesPerCycle !== undefined && timesPerCycle !== null)
            url_ += "TimesPerCycle=" + encodeURIComponent("" + timesPerCycle) + "&";
        if (unitsInCycle !== undefined && unitsInCycle !== null)
            url_ += "UnitsInCycle=" + encodeURIComponent("" + unitsInCycle) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddTransaction(_response);
        });
    }

    protected processAddTransaction(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an invalid authentication token or CSRF header is missing.", status, _responseText, _headers, result403);
            });
        } else if (status === 201) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("If fields didn\'t satisfy domain invariants or the optional ones were only partially specified.", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("If a profile, tax scheme, or asset with a specified ID could not be found.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Get transaction with given ID.
     * @return Returns the transaction.
     */
    getTransaction(user: number, profile: number, transaction: number): Promise<TransactionDto> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles/{profile}/transactions/{transaction}";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (profile === undefined || profile === null)
            throw new Error("The parameter 'profile' must be defined.");
        url_ = url_.replace("{Profile}", encodeURIComponent("" + profile));
        if (transaction === undefined || transaction === null)
            throw new Error("The parameter 'transaction' must be defined.");
        url_ = url_.replace("{Transaction}", encodeURIComponent("" + transaction));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTransaction(_response);
        });
    }

    protected processGetTransaction(response: Response): Promise<TransactionDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an invalid authentication token or CSRF header is missing.", status, _responseText, _headers, result403);
            });
        } else if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransactionDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("If transaction or profile was not found.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TransactionDto>(null as any);
    }

    /**
     * Deletes a transaction with given ID from a profile.
     * @return If transaction was deleted.
     */
    deleteTransaction(user: number, profile: number, transaction: number): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles/{profile}/transactions/{transaction}";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (profile === undefined || profile === null)
            throw new Error("The parameter 'profile' must be defined.");
        url_ = url_.replace("{Profile}", encodeURIComponent("" + profile));
        if (transaction === undefined || transaction === null)
            throw new Error("The parameter 'transaction' must be defined.");
        url_ = url_.replace("{Transaction}", encodeURIComponent("" + transaction));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteTransaction(_response);
        });
    }

    protected processDeleteTransaction(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an invalid authentication token or CSRF header is missing.", status, _responseText, _headers, result403);
            });
        } else if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("If transaction or profile was not found.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Assign a category to transaction.
     * @param category (optional) 
     * @return If the category was successfully added.
     */
    addCategoryToTransaction(user: number, profile: number, transaction: number, category: number | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles/{profile}/transactions/{transaction}/categories?";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (profile === undefined || profile === null)
            throw new Error("The parameter 'profile' must be defined.");
        url_ = url_.replace("{Profile}", encodeURIComponent("" + profile));
        if (transaction === undefined || transaction === null)
            throw new Error("The parameter 'transaction' must be defined.");
        url_ = url_.replace("{Transaction}", encodeURIComponent("" + transaction));
        if (category !== undefined && category !== null)
            url_ += "Category=" + encodeURIComponent("" + category) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddCategoryToTransaction(_response);
        });
    }

    protected processAddCategoryToTransaction(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an invalid authentication token or CSRF header is missing.", status, _responseText, _headers, result403);
            });
        } else if (status === 201) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("If a profile or transaction with a corresponding ID could not be found.", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("If the category already exists on the transaction.", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Remove a category from a transaction.
     * @param category (optional) 
     * @return If the category was successfully removed.
     */
    removeCategoryFromTransaction(user: number, profile: number, transaction: number, category: number | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/users/{user}/profiles/{profile}/transactions/{transaction}/categories?";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        if (profile === undefined || profile === null)
            throw new Error("The parameter 'profile' must be defined.");
        url_ = url_.replace("{Profile}", encodeURIComponent("" + profile));
        if (transaction === undefined || transaction === null)
            throw new Error("The parameter 'transaction' must be defined.");
        url_ = url_.replace("{Transaction}", encodeURIComponent("" + transaction));
        if (category !== undefined && category !== null)
            url_ += "Category=" + encodeURIComponent("" + category) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemoveCategoryFromTransaction(_response);
        });
    }

    protected processRemoveCategoryFromTransaction(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an invalid authentication token or CSRF header is missing.", status, _responseText, _headers, result403);
            });
        } else if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("If a profile, transaction, or category with corresponding ID was not found on the transaction.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class UsersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get details of an user with a given ID.
     * @return Details of user with given ID.
     */
    getUser(user: number): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/v1/users/{user}";
        if (user === undefined || user === null)
            throw new Error("The parameter 'user' must be defined.");
        url_ = url_.replace("{User}", encodeURIComponent("" + user));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUser(_response);
        });
    }

    protected processGetUser(response: Response): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If a user route is accessed without an authentication token.", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("If a user route is accessed with an authentication token assigned to another user ID.", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("If a user with the specified ID could not be found.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDto>(null as any);
    }

    /**
     * Register a new user with a username, email address, and password.
     * @param username (optional) 
     * @param email (optional) 
     * @param password (optional) 
     * @param confirmPassword (optional) 
     * @param rememberMe (optional) 
     * @return Returns the location of newly created user and an authentication token.
     */
    registerUser(username: string | null | undefined, email: string | null | undefined, password: string | null | undefined, confirmPassword: string | null | undefined, rememberMe: boolean | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/users/register?";
        if (username !== undefined && username !== null)
            url_ += "Username=" + encodeURIComponent("" + username) + "&";
        if (email !== undefined && email !== null)
            url_ += "Email=" + encodeURIComponent("" + email) + "&";
        if (password !== undefined && password !== null)
            url_ += "Password=" + encodeURIComponent("" + password) + "&";
        if (confirmPassword !== undefined && confirmPassword !== null)
            url_ += "ConfirmPassword=" + encodeURIComponent("" + confirmPassword) + "&";
        if (rememberMe === null)
            throw new Error("The parameter 'rememberMe' cannot be null.");
        else if (rememberMe !== undefined)
            url_ += "RememberMe=" + encodeURIComponent("" + rememberMe) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegisterUser(_response);
        });
    }

    protected processRegisterUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("If the user fields do not match domain or application rules.", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If the user creation attempt fails, e.g. username or email is already in use.", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Signs in as an user.
     * @param username (optional) 
     * @param password (optional) 
     * @param rememberMe (optional) 
     * @return Returns the ID of user and authentication token.
     */
    signInUser(username: string | null | undefined, password: string | null | undefined, rememberMe: boolean | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v1/users/sign-in?";
        if (username !== undefined && username !== null)
            url_ += "Username=" + encodeURIComponent("" + username) + "&";
        if (password !== undefined && password !== null)
            url_ += "Password=" + encodeURIComponent("" + password) + "&";
        if (rememberMe === null)
            throw new Error("The parameter 'rememberMe' cannot be null.");
        else if (rememberMe !== undefined)
            url_ += "RememberMe=" + encodeURIComponent("" + rememberMe) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSignInUser(_response);
        });
    }

    protected processSignInUser(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("If the authentication attempt fails, e.g. incorrect password.", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class AssetDto implements IAssetDto {
    id!: number;
    name!: string;
    description?: string | undefined;
    returnRate!: number;
    standardDeviation!: number;
    type!: AssetTypeDto;
    default!: boolean;

    constructor(data?: IAssetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.type = new AssetTypeDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.returnRate = _data["returnRate"];
            this.standardDeviation = _data["standardDeviation"];
            this.type = _data["type"] ? AssetTypeDto.fromJS(_data["type"]) : new AssetTypeDto();
            this.default = _data["default"];
        }
    }

    static fromJS(data: any): AssetDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["returnRate"] = this.returnRate;
        data["standardDeviation"] = this.standardDeviation;
        data["type"] = this.type ? this.type.toJSON() : <any>undefined;
        data["default"] = this.default;
        return data;
    }
}

export interface IAssetDto {
    id: number;
    name: string;
    description?: string | undefined;
    returnRate: number;
    standardDeviation: number;
    type: AssetTypeDto;
    default: boolean;
}

export class AssetTypeDto implements IAssetTypeDto {
    id!: number;
    name!: string;

    constructor(data?: IAssetTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AssetTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IAssetTypeDto {
    id: number;
    name: string;
}

export class ProfileDto implements IProfileDto {
    id!: number;
    name!: string;
    description?: string | undefined;
    withdrawalRate!: number;

    constructor(data?: IProfileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.withdrawalRate = _data["withdrawalRate"];
        }
    }

    static fromJS(data: any): ProfileDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["withdrawalRate"] = this.withdrawalRate;
        return data;
    }
}

export interface IProfileDto {
    id: number;
    name: string;
    description?: string | undefined;
    withdrawalRate: number;
}

export class TaxSchemeDto implements ITaxSchemeDto {
    id!: number;
    name!: string;
    description!: string;
    taxRate!: number;
    incentiveSchemeTaxRefundRate?: number | undefined;
    incentiveSchemeMinAge?: number | undefined;
    incentiveSchemeMaxIncomePercentage?: number | undefined;
    incentiveSchemeMaxApplicableIncome?: number | undefined;

    constructor(data?: ITaxSchemeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.taxRate = _data["taxRate"];
            this.incentiveSchemeTaxRefundRate = _data["incentiveSchemeTaxRefundRate"];
            this.incentiveSchemeMinAge = _data["incentiveSchemeMinAge"];
            this.incentiveSchemeMaxIncomePercentage = _data["incentiveSchemeMaxIncomePercentage"];
            this.incentiveSchemeMaxApplicableIncome = _data["incentiveSchemeMaxApplicableIncome"];
        }
    }

    static fromJS(data: any): TaxSchemeDto {
        data = typeof data === 'object' ? data : {};
        let result = new TaxSchemeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["taxRate"] = this.taxRate;
        data["incentiveSchemeTaxRefundRate"] = this.incentiveSchemeTaxRefundRate;
        data["incentiveSchemeMinAge"] = this.incentiveSchemeMinAge;
        data["incentiveSchemeMaxIncomePercentage"] = this.incentiveSchemeMaxIncomePercentage;
        data["incentiveSchemeMaxApplicableIncome"] = this.incentiveSchemeMaxApplicableIncome;
        return data;
    }
}

export interface ITaxSchemeDto {
    id: number;
    name: string;
    description: string;
    taxRate: number;
    incentiveSchemeTaxRefundRate?: number | undefined;
    incentiveSchemeMinAge?: number | undefined;
    incentiveSchemeMaxIncomePercentage?: number | undefined;
    incentiveSchemeMaxApplicableIncome?: number | undefined;
}

export class GetTaxSchemesQuery implements IGetTaxSchemesQuery {

    constructor(data?: IGetTaxSchemesQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetTaxSchemesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetTaxSchemesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IGetTaxSchemesQuery {
}

export class TransactionDto implements ITransactionDto {
    id!: number;
    amount!: number;
    taxSchemeId!: number;
    assetId?: number | undefined;
    categories!: BriefTransactionCategory[];
    paymentTimelineFrequencyUnitName?: string | undefined;
    paymentTimelineFrequencyUnitCode?: string | undefined;
    paymentTimelineFrequencyTimesPerUnit?: number | undefined;
    paymentTimelinePeriodStart!: Date;
    paymentTimelinePeriodEnd?: Date | undefined;

    constructor(data?: ITransactionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.categories = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.amount = _data["amount"];
            this.taxSchemeId = _data["taxSchemeId"];
            this.assetId = _data["assetId"];
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(BriefTransactionCategory.fromJS(item));
            }
            this.paymentTimelineFrequencyUnitName = _data["paymentTimelineFrequencyUnitName"];
            this.paymentTimelineFrequencyUnitCode = _data["paymentTimelineFrequencyUnitCode"];
            this.paymentTimelineFrequencyTimesPerUnit = _data["paymentTimelineFrequencyTimesPerUnit"];
            this.paymentTimelinePeriodStart = _data["paymentTimelinePeriodStart"] ? new Date(_data["paymentTimelinePeriodStart"].toString()) : <any>undefined;
            this.paymentTimelinePeriodEnd = _data["paymentTimelinePeriodEnd"] ? new Date(_data["paymentTimelinePeriodEnd"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TransactionDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["amount"] = this.amount;
        data["taxSchemeId"] = this.taxSchemeId;
        data["assetId"] = this.assetId;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        data["paymentTimelineFrequencyUnitName"] = this.paymentTimelineFrequencyUnitName;
        data["paymentTimelineFrequencyUnitCode"] = this.paymentTimelineFrequencyUnitCode;
        data["paymentTimelineFrequencyTimesPerUnit"] = this.paymentTimelineFrequencyTimesPerUnit;
        data["paymentTimelinePeriodStart"] = this.paymentTimelinePeriodStart ? formatDate(this.paymentTimelinePeriodStart) : <any>undefined;
        data["paymentTimelinePeriodEnd"] = this.paymentTimelinePeriodEnd ? formatDate(this.paymentTimelinePeriodEnd) : <any>undefined;
        return data;
    }
}

export interface ITransactionDto {
    id: number;
    amount: number;
    taxSchemeId: number;
    assetId?: number | undefined;
    categories: BriefTransactionCategory[];
    paymentTimelineFrequencyUnitName?: string | undefined;
    paymentTimelineFrequencyUnitCode?: string | undefined;
    paymentTimelineFrequencyTimesPerUnit?: number | undefined;
    paymentTimelinePeriodStart: Date;
    paymentTimelinePeriodEnd?: Date | undefined;
}

export class BriefTransactionCategory implements IBriefTransactionCategory {
    id!: number;
    name!: string;

    constructor(data?: IBriefTransactionCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): BriefTransactionCategory {
        data = typeof data === 'object' ? data : {};
        let result = new BriefTransactionCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IBriefTransactionCategory {
    id: number;
    name: string;
}

export class UserDto implements IUserDto {
    id!: number;
    name!: string;
    email!: string;
    displayName!: string;
    profiles!: BriefProfile[];

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.profiles = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.displayName = _data["displayName"];
            if (Array.isArray(_data["profiles"])) {
                this.profiles = [] as any;
                for (let item of _data["profiles"])
                    this.profiles!.push(BriefProfile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["displayName"] = this.displayName;
        if (Array.isArray(this.profiles)) {
            data["profiles"] = [];
            for (let item of this.profiles)
                data["profiles"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserDto {
    id: number;
    name: string;
    email: string;
    displayName: string;
    profiles: BriefProfile[];
}

export class BriefProfile implements IBriefProfile {
    id!: number;
    name!: string;

    constructor(data?: IBriefProfile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): BriefProfile {
        data = typeof data === 'object' ? data : {};
        let result = new BriefProfile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IBriefProfile {
    id: number;
    name: string;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}